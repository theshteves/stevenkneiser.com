{"version":3,"file":"component---src-pages-blog-jsx-51dbd33ca12dc4c9c6c0.js","mappings":"oMAAA,EAAe,IAA0B,8DCK1B,SAASA,EAAT,GAA+D,IAkBpEC,EAEAC,EAbWC,EAPaC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MAC5DC,EAAYN,EACfO,eAAe,QAAS,CAAEC,UAAW,SACrCC,MAAM,KAAK,GACRC,GAAc,IAAIC,MAAOC,cACzBC,EAAOb,EAAKY,cAqBlB,OACE,uBAAKE,WApBYf,EAoBSG,EAAMa,OAnB5BhB,EAAM,GAAM,EACP,yBAEJA,EAAM,GAAK,GAAM,EACb,iCAEF,oCAcL,uBACEe,WAXEjB,EAAa,CAAC,QAAS,UAEvBC,EAAqB,aAAXM,EAAwB,SAAW,QACnDP,EAAWmB,KAAKX,EAAK,MAASP,EAAT,aAA+BA,EAA/B,QAEdD,EAAWoB,KAAK,MAOnBC,MAAO,CAAEC,gBAAgB,OAAQC,EAAT,MAExB,qBAAGN,UAAU,uDACVR,EADH,IACe,IACb,wBACEQ,UACED,IAASH,EACL,GACA,uDAGLG,IAIJR,EACC,qBAAGS,UAAU,6BAAb,wBACE,KAEQ,aAAXV,EACC,gBAAC,KAAD,CAAMiB,GAAIpB,GACR,sBACEa,UACET,EACI,8BACA,+BAGLH,IAIL,qBAAGD,KAAMA,GACP,sBACEa,UACET,EACI,8BACA,+BAGLH,IAKP,uBACEY,UAAU,YACVQ,wBAAyB,CAAEC,OAAQpB,OClD9B,SAASqB,EAAT,GAA6B,IAATC,EAAQ,EAARA,KAE3BC,EAAeD,EAAKE,kBAAkBC,MAAMC,KAAI,SAACC,GAAD,MAAW,CAC/D9B,KAAM,IAAIW,KAAQmB,EAAKC,YAAY/B,KAA7B,UACNC,KAAM6B,EAAKC,YAAYC,UACvB9B,MAAO4B,EAAKC,YAAY7B,MACxBC,MAAO2B,EAAKG,QACZ7B,OAAQ,WACRC,MAAOyB,EAAKC,YAAY1B,UAEpB6B,EAAUT,EAAKU,OAAOP,MAAMC,KAAI,SAACC,GAAD,MAAW,CAC/C9B,KAAM,IAAIW,KAAQmB,EAAK9B,KAAjB,UACNC,KAAM6B,EAAKM,IACXlC,MAAO4B,EAAK5B,MACZC,MAAM,MAAO2B,EAAKG,QAAb,OACL7B,OAAQ,MACRC,OAAO,MAEHgC,EAAWX,EAAaY,OAAOJ,GAASK,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEzC,KAAOwC,EAAExC,QAKlE0C,EAAO,CACXxC,MAAO,wBACPyC,YAAY,8BALOjB,EAClBkB,MAAM,EAAG,GACTf,KAAI,SAACgB,GAAD,UAAiBA,EAAQ3C,SAGnB,YAGb,OACE,gBAAC,IAAD,CAAQwC,KAAMA,GACZ,yCAEA,uBAAK5B,UAAU,mEACZuB,EAASR,KAAI,gBAAG7B,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,OAAQC,EAArC,EAAqCA,MAArC,OACZ,gBAACT,EAAD,CACEkD,IAAK7C,EACLD,KAAMA,EACNC,KAAMA,EACNC,MAAOA,EACPC,MAAOA,EACPC,OAAQA,EACRC,MAAOA","sources":["webpack://steven-kneiser/./src/assets/img/exclusive-paper.png","webpack://steven-kneiser/./src/components/preview.jsx","webpack://steven-kneiser/./src/pages/blog.jsx"],"sourcesContent":["export default __webpack_public_path__ + \"static/exclusive-paper-ffa6a31cdcf531560c5622a7e24e783b.png\";","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport texture from '../assets/img/exclusive-paper.png'\n\nexport default function Preview({ date, href, title, blurb, source, draft }) {\n  const dayOfYear = date\n    .toLocaleString('en-US', { dateStyle: 'long' })\n    .split(',')[0]\n  const currentYear = new Date().getFullYear()\n  const year = date.getFullYear()\n\n  const tiltStyle = (num) => {\n    if (num % 3 === 0) {\n      return 'transform self-center'\n    }\n    if ((num + 1) % 3 === 0) {\n      return 'transform rotate-2 self-center'\n    }\n    return 'transform -rotate-2 self-center'\n  }\n\n  const cardType = () => {\n    const classNames = ['my-80', 'postit']\n\n    const bgColor = source === 'internal' ? 'yellow' : 'green'\n    classNames.push(draft ? `bg-${bgColor}-100` : `bg-${bgColor}-300`)\n\n    return classNames.join(' ')\n  }\n\n  return (\n    <div className={tiltStyle(title.length)}>\n      <div\n        className={cardType()}\n        style={{ backgroundImage: `url(${texture})` }}\n      >\n        <p className='my-1 text-left font-mono transform -rotate-6 italic'>\n          {dayOfYear},{' '}\n          <span\n            className={\n              year === currentYear\n                ? ''\n                : 'inline-block rounded-lg px-1 text-yellow-800 italic'\n            }\n          >\n            {year}\n          </span>\n        </p>\n\n        {draft ? (\n          <p className='mt-4 text-right font-mono'>ðŸ”’ draft in progress</p>\n        ) : null}\n\n        {source === 'internal' ? (\n          <Link to={href}>\n            <h2\n              className={\n                draft\n                  ? 'text-3xl text-gray-500 mt-4'\n                  : 'text-3xl text-blue-700 mt-8'\n              }\n            >\n              {title}\n            </h2>\n          </Link>\n        ) : (\n          <a href={href}>\n            <h2\n              className={\n                draft\n                  ? 'text-3xl text-gray-500 mt-4'\n                  : 'text-3xl text-blue-700 mt-8'\n              }\n            >\n              {title}\n            </h2>\n          </a>\n        )}\n\n        <div\n          className='text-left'\n          dangerouslySetInnerHTML={{ __html: blurb }}\n        />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Preview from '../components/preview'\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\n      nodes {\n        frontmatter {\n          date\n          permalink\n          title\n          draft\n        }\n        excerpt(format: HTML)\n        timeToRead\n      }\n    }\n\n    allCwc(sort: { fields: date, order: DESC }) {\n      nodes {\n        date\n        url\n        title\n        excerpt\n      }\n    }\n  }\n`\n\nexport default function BlogPage({ data }) {\n  // Merge all content, sorted by date\n  const personalBlog = data.allMarkdownRemark.nodes.map((node) => ({\n    date: new Date(`${node.frontmatter.date} 16:00`),\n    href: node.frontmatter.permalink,\n    title: node.frontmatter.title,\n    blurb: node.excerpt,\n    source: 'internal',\n    draft: node.frontmatter.draft,\n  }))\n  const cwcBlog = data.allCwc.nodes.map((node) => ({\n    date: new Date(`${node.date} 16:00`),\n    href: node.url,\n    title: node.title,\n    blurb: `<p>${node.excerpt}</p>`,\n    source: 'cwc',\n    draft: false,\n  }))\n  const previews = personalBlog.concat(cwcBlog).sort((a, b) => b.date - a.date)\n\n  const recentTitles = personalBlog\n    .slice(1, 4)\n    .map((preview) => ` ${preview.title}`)\n  const meta = {\n    title: 'Blog - Steven Kneiser',\n    description: `The blog of Steven Kneiser:${recentTitles}, & more`,\n  }\n\n  return (\n    <Layout meta={meta}>\n      <h1>Most Recent</h1>\n\n      <div className='mt-16 flex flex-wrap justify-evenly content-around items-center'>\n        {previews.map(({ date, href, title, blurb, source, draft }) => (\n          <Preview\n            key={href}\n            date={date}\n            href={href}\n            title={title}\n            blurb={blurb}\n            source={source}\n            draft={draft}\n          />\n        ))}\n      </div>\n    </Layout>\n  )\n}\n"],"names":["Preview","classNames","bgColor","num","date","href","title","blurb","source","draft","dayOfYear","toLocaleString","dateStyle","split","currentYear","Date","getFullYear","year","className","length","push","join","style","backgroundImage","texture","to","dangerouslySetInnerHTML","__html","BlogPage","data","personalBlog","allMarkdownRemark","nodes","map","node","frontmatter","permalink","excerpt","cwcBlog","allCwc","url","previews","concat","sort","a","b","meta","description","slice","preview","key"],"sourceRoot":""}